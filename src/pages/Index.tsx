import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import Icon from '@/components/ui/icon';

const Index: React.FC = () => {
  const [activeTab, setActiveTab] = useState('–≥–ª–∞–≤–Ω–∞—è');
  const [newMessage, setNewMessage] = useState('');
  const [messages, setMessages] = useState<any[]>([]);
  const [servers, setServers] = useState<any[]>([]);
  const [channels, setChannels] = useState<any[]>([]);
  const [stats, setStats] = useState({ online_users: 1547, messages_today: 12453 });
  const [sessionToken, setSessionToken] = useState('');
  const [selectedChannelId, setSelectedChannelId] = useState(1);
  const [loading, setLoading] = useState(false);

  const navigation = [
    { id: '–≥–ª–∞–≤–Ω–∞—è', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'Home' },
    { id: '—á–∞—Ç—ã', label: '–ß–∞—Ç—ã', icon: 'MessageCircle' },
    { id: '—Å–µ—Ä–≤–µ—Ä—ã', label: '–°–µ—Ä–≤–µ—Ä—ã', icon: 'Server' },
    { id: '–∫–∞–Ω–∞–ª—ã', label: '–ö–∞–Ω–∞–ª—ã', icon: 'Hash' },
    { id: '–ø—Ä–∞–≤–∏–ª–∞', label: '–ü—Ä–∞–≤–∏–ª–∞', icon: 'Shield' }
  ];

  // API URLs
  const API_URLS = {
    messages: 'https://functions.poehali.dev/6edee770-b3ed-48dd-8c64-4c5689790e03',
    servers: 'https://functions.poehali.dev/a0f645d9-0fc2-4cc2-b5e4-5218604ddc67',
    online: 'https://functions.poehali.dev/94d7f14e-ff02-47f2-aa70-a08bbed212a2'
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
  const loadMessages = async (channelId = selectedChannelId) => {
    try {
      const response = await fetch(`${API_URLS.messages}?channel_id=${channelId}&limit=50`);
      const data = await response.json();
      if (data.messages) {
        setMessages(data.messages);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ
      setMessages([
        { id: 1, user: '–ê–Ω–æ–Ω–∏–º#1234', message: '–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã', time: '14:23', avatar: 'A' },
        { id: 2, user: '–ì–æ—Å—Ç—å#5678', message: '–ö–∞–∫ –¥–µ–ª–∞?', time: '14:25', avatar: '–ì' },
        { id: 3, user: '–ü—É—Ç–Ω–∏–∫#9012', message: '–û—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å?', time: '14:27', avatar: '–ü' },
        { id: 4, user: '–°—Ç—Ä–∞–Ω–Ω–∏–∫#3456', message: '–ö—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ –∫–æ—Å–º–æ—Å–µ? üöÄ', time: '14:30', avatar: '–°' }
      ]);
    }
  };

  const loadServers = async () => {
    try {
      const response = await fetch(`${API_URLS.servers}?type=servers`);
      const data = await response.json();
      if (data.servers) {
        setServers(data.servers);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ
      setServers([
        { id: 1, name: '–û–±—â–∏–π —á–∞—Ç', members: 1547, online: 234, emoji: 'üí¨' },
        { id: 2, name: '–ò–≥—Ä–æ–∫–∏', members: 892, online: 156, emoji: 'üéÆ' },
        { id: 3, name: '–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ', members: 445, online: 67, emoji: 'üé®' },
        { id: 4, name: '–ú—É–∑—ã–∫–∞', members: 723, online: 89, emoji: 'üéµ' }
      ]);
    }
  };

  const loadChannels = async () => {
    try {
      const response = await fetch(`${API_URLS.servers}?type=channels`);
      const data = await response.json();
      if (data.channels) {
        setChannels(data.channels);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤:', error);
      // Fallback –¥–∞–Ω–Ω—ã–µ
      setChannels([
        { id: 1, name: 'general', topic: '–û–±—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã', messages: 1247 },
        { id: 2, name: 'random', topic: '–°–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–º—ã', messages: 856 },
        { id: 3, name: 'help', topic: '–ü–æ–º–æ—â—å –Ω–æ–≤–∏—á–∫–∞–º', messages: 234 },
        { id: 4, name: 'voice', topic: '–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª', messages: 45 }
      ]);
    }
  };

  const loadStats = async () => {
    try {
      const response = await fetch(API_URLS.online);
      const data = await response.json();
      if (data.online_users) {
        setStats({
          online_users: data.online_users,
          messages_today: data.messages_today || 12453
        });
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      setStats({ online_users: 1547, messages_today: 12453 });
    }
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    loadMessages();
    loadServers();
    loadChannels();
    loadStats();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    const statsInterval = setInterval(loadStats, 30000);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    const messagesInterval = setInterval(() => {
      if (activeTab === '—á–∞—Ç—ã') {
        loadMessages();
      }
    }, 5000);
    
    return () => {
      clearInterval(statsInterval);
      clearInterval(messagesInterval);
    };
  }, [activeTab, selectedChannelId]);

  const sendMessage = async () => {
    if (!newMessage.trim() || loading) return;
    
    setLoading(true);
    
    try {
      const response = await fetch(API_URLS.messages, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Session-Token': sessionToken
        },
        body: JSON.stringify({
          message: newMessage,
          channel_id: selectedChannelId
        })
      });
      
      const data = await response.json();
      
      if (data.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (data.session_token) {
          setSessionToken(data.session_token);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        setMessages(prev => [...prev, data.message]);
        setNewMessage('');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        setTimeout(() => loadMessages(), 1000);
      } else {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', data);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
      const newMsg = {
        id: Date.now(),
        user: sessionToken ? `–ê–Ω–æ–Ω–∏–º#${sessionToken.slice(-4)}` : '–ê–Ω–æ–Ω–∏–º#1234',
        avatar: '–ê',
        message: newMessage,
        time: new Date().toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })
      };
      setMessages(prev => [...prev, newMsg]);
      setNewMessage('');
    } finally {
      setLoading(false);
    }
  };

  const renderContent = () => {
    switch (activeTab) {
      case '–≥–ª–∞–≤–Ω–∞—è':
        return (
          <div className="space-y-6 animate-fade-in">
            <div className="bg-gradient-primary rounded-2xl p-8 text-white">
              <h1 className="text-4xl font-bold mb-4">Anonymous Chat</h1>
              <p className="text-lg opacity-90">
                –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ–±—â–µ–Ω–∏—è
              </p>
              <div className="mt-6 flex items-center gap-4">
                <Badge variant="secondary" className="bg-white/20 text-white hover:bg-white/30">
                  <Icon name="Users" size={16} className="mr-2" />
                  {stats.online_users.toLocaleString()} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
                </Badge>
                <Badge variant="secondary" className="bg-white/20 text-white hover:bg-white/30">
                  <Icon name="MessageCircle" size={16} className="mr-2" />
                  {stats.messages_today.toLocaleString()} —Å–æ–æ–±—â–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è
                </Badge>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <Card className="hover:shadow-lg transition-all duration-300 hover:scale-105 animate-scale-in">
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center">
                      <Icon name="Shield" size={24} className="text-white" />
                    </div>
                    <h3 className="text-lg font-semibold">–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å</h3>
                  </div>
                  <p className="text-muted-foreground">
                    –ü–æ–ª–Ω–∞—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                  </p>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-all duration-300 hover:scale-105 animate-scale-in" style={{animationDelay: '0.1s'}}>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center">
                      <Icon name="Zap" size={24} className="text-white" />
                    </div>
                    <h3 className="text-lg font-semibold">–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ</h3>
                  </div>
                  <p className="text-muted-foreground">
                    –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è
                  </p>
                </CardContent>
              </Card>

              <Card className="hover:shadow-lg transition-all duration-300 hover:scale-105 animate-scale-in" style={{animationDelay: '0.2s'}}>
                <CardContent className="p-6">
                  <div className="flex items-center gap-3 mb-4">
                    <div className="w-12 h-12 bg-gradient-primary rounded-full flex items-center justify-center">
                      <Icon name="Globe" size={24} className="text-white" />
                    </div>
                    <h3 className="text-lg font-semibold">–ì–ª–æ–±–∞–ª—å–Ω–æ</h3>
                  </div>
                  <p className="text-muted-foreground">
                    –û–±—â–µ–Ω–∏–µ –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü
                  </p>
                </CardContent>
              </Card>
            </div>
          </div>
        );

      case '—á–∞—Ç—ã':
        return (
          <div className="space-y-6 animate-fade-in">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã</h2>
              <Button className="bg-gradient-primary hover:bg-gradient-secondary" onClick={loadMessages}>
                <Icon name="RefreshCw" size={16} className="mr-2" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </div>

            <Card className="h-96 flex flex-col">
              <CardContent className="flex-1 p-4 overflow-y-auto space-y-4">
                {messages.map((msg) => (
                  <div key={msg.id} className="flex items-start gap-3 animate-slide-in">
                    <Avatar className="w-8 h-8">
                      <AvatarFallback className="text-xs bg-gradient-primary text-white">
                        {msg.avatar}
                      </AvatarFallback>
                    </Avatar>
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2 mb-1">
                        <span className="font-medium text-sm">{msg.user}</span>
                        <span className="text-xs text-muted-foreground">{msg.time}</span>
                      </div>
                      <p className="text-sm">{msg.message}</p>
                    </div>
                  </div>
                ))}
              </CardContent>
              
              <Separator />
              
              <div className="p-4 flex gap-2">
                <Input
                  placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                  className="flex-1"
                />
                <Button 
                  onClick={sendMessage} 
                  disabled={loading || !newMessage.trim()}
                  className="bg-primary hover:bg-primary/90 disabled:opacity-50"
                >
                  {loading ? (
                    <Icon name="Loader2" size={16} className="animate-spin" />
                  ) : (
                    <Icon name="Send" size={16} />
                  )}
                </Button>
              </div>
            </Card>
          </div>
        );

      case '—Å–µ—Ä–≤–µ—Ä—ã':
        return (
          <div className="space-y-6 animate-fade-in">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">–°–µ—Ä–≤–µ—Ä—ã —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</h2>
              <Button variant="outline" onClick={loadServers}>
                <Icon name="RefreshCw" size={16} className="mr-2" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {servers.map((server, index) => (
                <Card key={server.id} className="hover:shadow-lg transition-all duration-300 hover:scale-105 cursor-pointer animate-scale-in" style={{animationDelay: `${index * 0.1}s`}}>
                  <CardContent className="p-6">
                    <div className="flex items-start justify-between mb-4">
                      <div className="flex items-center gap-3">
                        <div className="w-12 h-12 rounded-full bg-gradient-primary flex items-center justify-center text-2xl">
                          {server.emoji}
                        </div>
                        <div>
                          <h3 className="font-semibold text-lg">{server.name}</h3>
                          <div className="flex items-center gap-4 text-sm text-muted-foreground mt-1">
                            <span className="flex items-center gap-1">
                              <Icon name="Users" size={14} />
                              {server.members}
                            </span>
                            <span className="flex items-center gap-1">
                              <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse-slow"></div>
                              {server.online} –æ–Ω–ª–∞–π–Ω
                            </span>
                          </div>
                        </div>
                      </div>
                      <Button size="sm" className="bg-gradient-primary hover:bg-gradient-secondary">
                        –í–æ–π—Ç–∏
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case '–∫–∞–Ω–∞–ª—ã':
        return (
          <div className="space-y-6 animate-fade-in">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold">–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞–Ω–∞–ª—ã</h2>
              <Button variant="outline" onClick={loadChannels}>
                <Icon name="RefreshCw" size={16} className="mr-2" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </Button>
            </div>

            <div className="space-y-3">
              {channels.map((channel, index) => (
                <Card 
                  key={channel.id} 
                  className="hover:shadow-md transition-all duration-300 cursor-pointer animate-slide-in" 
                  style={{animationDelay: `${index * 0.1}s`}}
                  onClick={() => {
                    setSelectedChannelId(channel.id);
                    setActiveTab('—á–∞—Ç—ã');
                    loadMessages(channel.id);
                  }}
                >
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 rounded-lg bg-gradient-primary flex items-center justify-center">
                          <Icon name="Hash" size={16} className="text-white" />
                        </div>
                        <div>
                          <h3 className="font-medium">#{channel.name}</h3>
                          <p className="text-sm text-muted-foreground">{channel.topic}</p>
                        </div>
                      </div>
                      <div className="flex items-center gap-4">
                        <Badge variant="secondary" className="text-xs">
                          {channel.messages} —Å–æ–æ–±—â–µ–Ω–∏–π
                        </Badge>
                        <Button size="sm" variant="ghost">
                          <Icon name="ChevronRight" size={16} />
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      case '–ø—Ä–∞–≤–∏–ª–∞':
        return (
          <div className="space-y-6 animate-fade-in">
            <div className="bg-gradient-primary rounded-2xl p-8 text-white">
              <h2 className="text-3xl font-bold mb-4">–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞</h2>
              <p className="text-lg opacity-90">
                –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
              </p>
            </div>

            <div className="space-y-4">
              {[
                {
                  title: 'ü§ù –£–≤–∞–∂–µ–Ω–∏–µ',
                  desc: '–û—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å —É–≤–∞–∂–µ–Ω–∏–µ–º, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∏—Ö –º–Ω–µ–Ω–∏–π'
                },
                {
                  title: 'üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
                  desc: '–ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç'
                },
                {
                  title: 'üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å',
                  desc: '–ù–µ –¥–µ–ª–∏—Ç–µ—Å—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
                },
                {
                  title: 'üì¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è',
                  desc: '–°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å–æ–æ–±—â–∞–π—Ç–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö'
                },
                {
                  title: 'üéØ –ü–æ —Ç–µ–º–µ',
                  desc: '–í–µ–¥–∏—Ç–µ –¥–∏—Å–∫—É—Å—Å–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏ —Ç–µ–º–∞—Ö'
                }
              ].map((rule, index) => (
                <Card key={index} className="animate-scale-in" style={{animationDelay: `${index * 0.1}s`}}>
                  <CardContent className="p-6">
                    <h3 className="text-lg font-semibold mb-2">{rule.title}</h3>
                    <p className="text-muted-foreground">{rule.desc}</p>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
        );

      default:
        return <div>–†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <nav className="bg-white/80 backdrop-blur-md border-b sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-primary rounded-xl flex items-center justify-center">
                <Icon name="MessageCircle" size={20} className="text-white" />
              </div>
              <span className="text-xl font-bold bg-gradient-primary bg-clip-text text-transparent">
                AnonChat
              </span>
            </div>

            <div className="flex items-center gap-1">
              {navigation.map((item) => (
                <Button
                  key={item.id}
                  variant={activeTab === item.id ? "default" : "ghost"}
                  onClick={() => setActiveTab(item.id)}
                  className={`transition-all duration-200 ${
                    activeTab === item.id 
                      ? 'bg-gradient-primary hover:bg-gradient-secondary text-white' 
                      : 'hover:bg-gray-100'
                  }`}
                >
                  <Icon name={item.icon as any} size={16} className="mr-2" />
                  {item.label}
                </Button>
              ))}
            </div>

            <div className="flex items-center gap-3">
              <Badge variant="outline" className="text-xs">
                <div className="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse-slow"></div>
                {stats.online_users.toLocaleString()} –æ–Ω–ª–∞–π–Ω
              </Badge>
              <Button variant="outline" size="sm">
                <Icon name="Settings" size={16} className="mr-2" />
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </Button>
              <Button variant="outline" size="sm">
                <Icon name="User" size={16} className="mr-2" />
                {sessionToken ? `–ê–Ω–æ–Ω–∏–º#${sessionToken.slice(-4)}` : '–ê–Ω–æ–Ω–∏–º#1234'}
              </Button>
            </div>
          </div>
        </div>
      </nav>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {renderContent()}
      </main>
    </div>
  );
};

export default Index;